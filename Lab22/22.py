import mglearn
import sklearn
import matplotlib.pyplot as plt
import numpy as np
from sklearn.datasets import make_blobs


# –û–±—â–µ—Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–Ω–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–∏—Ç—å
# –∞–ª–≥–æ—Ä–∏—Ç–º –±–∏–Ω–∞—Ä–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Å–ª—É—á–∞–π –º—É–ª—å—Ç–∏–∫–ª–∞—Å—Å–æ–≤–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ö–æ–¥–æ–º
# –æ–¥–∏–Ω –ø—Ä–æ—Ç–∏–≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö (one-vs.-rest). –í –ø–æ–¥—Ö–æ–¥–µ ¬´–æ–¥–∏–Ω –ø—Ä–æ—Ç–∏–≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö¬ª –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
# —Å—Ç—Ä–æ–∏—Ç—Å—è –±–∏–Ω–∞—Ä–Ω–∞—è –º–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–ª–∞—Å—Å –æ—Ç –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö, –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
# —á–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–ª–∞—Å—Å–æ–≤. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ —Ç–æ—á–∫–∞
# —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞ –≤—Å–µ –±–∏–Ω–∞—Ä–Ω—ã–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã. –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–¥–∞–µ—Ç –ø–æ
# —Å–≤–æ–µ–º—É –∫–ª–∞—Å—Å—É –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, ¬´–ø–æ–±–µ–∂–¥–∞–µ—Ç¬ª –∏ –º–µ—Ç–∫–∞ —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ
# –ø—Ä–æ–≥–Ω–æ–∑–∞.

X, y = make_blobs(random_state=42)
mglearn.discrete_scatter(X[:, 0], X[:, 1], y)
plt.xlabel("–ü—Ä–∏–∑–Ω–∞–∫ 0")
plt.ylabel("–ü—Ä–∏–∑–Ω–∞–∫ 1")
plt.legend(["–ö–ª–∞—Å—Å 0", "–ö–ª–∞—Å—Å 1", "–ö–ª–∞—Å—Å 2"])
plt.show()

# ùë§[0]‚àóùë•[0]	ùë§[1]‚àóùë•[1] ‚Ä¶ ùë§[ùëù]‚àóùë•[ùëù] ùëè

from sklearn.svm import LinearSVC
linear_svm = LinearSVC().fit(X, y)
print("–§–æ—Ä–º–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞: ", linear_svm.coef_.shape)
print("–§–æ—Ä–º–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã: ", linear_svm.intercept_.shape)
mglearn.discrete_scatter(X[:, 0], X[:, 1], y)
line = np.linspace(-15, 15)
for coef, intercept, color in zip(linear_svm.coef_, linear_svm.intercept_, ['b', 'r', 'g']):
 plt.plot(line, -(line * coef[0] + intercept) / coef[1], c=color)
plt.ylim(-10, 15)
plt.xlim(-10, 8)
plt.xlabel("–ü—Ä–∏–∑–Ω–∞–∫ 0")
plt.ylabel("–ü—Ä–∏–∑–Ω–∞–∫ 1")
plt.legend(['–ö–ª–∞—Å—Å 0', '–ö–ª–∞—Å—Å 1', '–ö–ª–∞—Å—Å 2', '–õ–∏–Ω–∏—è –∫–ª–∞—Å—Å–∞ 0', '–õ–∏–Ω–∏—è –∫–ª–∞—Å—Å–∞ 1', '–õ–∏–Ω–∏—è –∫–ª–∞—Å—Å–∞ 2'], loc=(1.01, 0.3))
plt.show()


mglearn.plots.plot_2d_classification(linear_svm, X, fill=True, alpha=.7)
mglearn.discrete_scatter(X[:, 0], X[:, 1], y)
line = np.linspace(-15, 15)
for coef, intercept, color in zip(linear_svm.coef_, linear_svm.intercept_, ['b', 'r', 'g']):
 plt.plot(line, -(line * coef[0] + intercept) / coef[1], c=color)
plt.legend(['–ö–ª–∞—Å—Å 0', '–ö–ª–∞—Å—Å 1', '–ö–ª–∞—Å—Å 2', '–õ–∏–Ω–∏—è –∫–ª–∞—Å—Å–∞ 0', '–õ–∏–Ω–∏—è –∫–ª–∞—Å—Å–∞ 1',
'–õ–∏–Ω–∏—è –∫–ª–∞—Å—Å–∞ 2'], loc=(1.01, 0.3))
plt.xlabel("–ü—Ä–∏–∑–Ω–∞–∫ 0")
plt.ylabel("–ü—Ä–∏–∑–Ω–∞–∫ 1")
plt.show()