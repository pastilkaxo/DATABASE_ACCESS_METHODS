import sklearn
import mglearn
import matplotlib.pyplot as plt
import matplotlib
import numpy as np

# –õ–∏–Ω–µ–π–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–∞—é—Ç –ø—Ä–æ–≥–Ω–æ–∑, –∏—Å–ø–æ–ª—å–∑—É—è –ª–∏–Ω–µ–π–Ω—É—é
# —Ñ—É–Ω–∫—Ü–∏—é (linear function) –≤—Ö–æ–¥–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –æ –∫–æ—Ç–æ—Ä–æ–π –º—ã —Ä–∞—Å—Å–∫–∞–∂–µ–º –Ω–∏–∂–µ.


# yÀÜùë§[0]‚àóùë•[0] ùë§[1]‚àóùë•[1]	‚Ä¶ ùë§[ùëù]‚àóùë•[ùëù]	ùëè
# w,b - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
# x[0],x[p] - –ø—Ä–∏–∑–Ω–∞–∫–∏

mglearn.plots.plot_linear_regression_wave()
plt.show()

# w[0] - –Ω–∞–∫–ª–æ–Ω b - —Å–¥–≤–∏–≥
# –õ–∏–Ω–µ–π–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –º–æ–∂–Ω–æ –æ—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑–æ–≤–∞—Ç—å –∫–∞–∫ —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏, –≤
# –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–º —è–≤–ª—è–µ—Ç—Å—è –ø—Ä—è–º–∞—è –ª–∏–Ω–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞, –ø–ª–æ—Å–∫–æ—Å—Ç—å, –∫–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–∞
# –ø—Ä–∏–∑–Ω–∞–∫–∞, –∏–ª–∏ –≥–∏–ø–µ—Ä–ø–ª–æ—Å–∫–æ—Å—Ç—å –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π (—Ç–æ –µ—Å—Ç—å, –∫–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º
# –º–Ω–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤).

# –°—É—â–µ—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∏–¥—ã –ª–∏–Ω–µ–π–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏. –†–∞–∑–ª–∏—á–∏–µ –º–µ–∂–¥—É —ç—Ç–∏–º–∏
# –º–æ–¥–µ–ª—è–º–∏ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Å–ø–æ—Å–æ–±–µ –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏ w –∏ b –ø–æ –æ–±—É—á–∞—é—â–∏–º –¥–∞–Ω–Ω—ã–º –∏
# –∫–æ–Ω—Ç—Ä–æ–ª–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏. –¢–µ–ø–µ—Ä—å –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ª–∏–Ω–µ–π–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è
# —Ä–µ–≥—Ä–µ—Å—Å–∏–∏.


# –º–µ—Ç–æ–¥ –Ω–∞–∏–º–µ–Ω—å—à–∏—Ö –∫–≤–∞–¥—Ä–∞—Ç–æ–≤

from sklearn.linear_model import LinearRegression
X, y = mglearn.datasets.make_wave(n_samples=60)
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)
lr = LinearRegression().fit(X_train, y_train)


# –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è –∏–ª–∏ –æ–±—ã—á–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–∞–∏–º–µ–Ω—å—à–∏—Ö –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ (ordinary least squares,
# OLS) ‚Äì —ç—Ç–æ —Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–∏–±–æ–ª–µ–µ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏. –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è
# –Ω–∞—Ö–æ–¥–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã w –∏ b, –∫–æ—Ç–æ—Ä—ã–µ –º–∏–Ω–∏–º–∏–∑–∏—Ä—É—é—Ç —Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É (mean squared
# error) –º–µ–∂–¥—É —Å–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏ —É –≤ –æ–±—É—á–∞—é—â–µ–º –Ω–∞–±–æ—Ä–µ.


print("lr.coef_ –∫–æ—ç—Ñ. –Ω–∞–∫–ª–æ–Ω–∞ w: {}".format(lr.coef_))
print("lr.intercept_ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —Å–¥–≤–∏–≥–∞ b: {}".format(lr.intercept_))
print("–ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –æ–±—É—á–∞—é—â–µ–º –Ω–∞–±–æ—Ä–µ: {:.2f}".format(lr.score(X_train, y_train)))
print("–ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º –Ω–∞–±–æ—Ä–µ: {:.2f}".format(lr.score(X_test, y_test)))
print("======================================");
X, y = mglearn.datasets.load_extended_boston()
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)
lr = LinearRegression().fit(X_train, y_train)
plt.plot(lr.coef_, 'o', label="–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è")
plt.xlabel("–ò–Ω–¥–µ–∫—Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞")
print("–ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –æ–±—É—á–∞—é—â–µ–º –Ω–∞–±–æ—Ä–µ: {:.2f}".format(lr.score(X_train, y_train)))
print("–ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º –Ω–∞–±–æ—Ä–µ: {:.2f}".format(lr.score(X_test, y_test)))

# –≠—Ç–æ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å—é –Ω–∞ –æ–±—É—á–∞—é—â–µ–º –Ω–∞–±–æ—Ä–µ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å—é –Ω–∞
# —Ç–µ—Å—Ç–æ–≤–æ–º –Ω–∞–±–æ—Ä–µ —è–≤–ª—è–µ—Ç—Å—è —è–≤–Ω—ã–º –ø—Ä–∏–∑–Ω–∞–∫–æ–º –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –∏ –ø–æ—ç—Ç–æ–º—É –º—ã –¥–æ–ª–∂–Ω—ã –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è
# –Ω–∞–π—Ç–∏ –º–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª–∏—Ç –Ω–∞–º –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å. –û–¥–Ω–∞ –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ
# –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ ‚Äì –≥—Ä–µ–±–Ω–µ–≤–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è, –∫–æ—Ç–æ—Ä—É—é –º—ã
# —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –Ω–∏–∂–µ.

print("================= –ì—Ä–µ–±–Ω–µ–≤–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è =====================");

#  –≠—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–º–µ—Ä–æ–º —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏ (regularization).
# –†–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è –æ–∑–Ω–∞—á–∞–µ—Ç —è–≤–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è.
# –†–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è, –∏—Å–ø–æ–ª—å–∑—É—é—â–∞—è—Å—è –≤ –≥—Ä–µ–±–Ω–µ–≤–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏, –∏–∑–≤–µ—Å—Ç–Ω–∞ –∫–∞–∫ L2 —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è.


from sklearn.linear_model import Ridge
ridge = Ridge().fit(X_train, y_train)
print("–ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –æ–±—É—á–∞—é—â–µ–º –Ω–∞–±–æ—Ä–µ: {:.2f}".format(ridge.score(X_train, y_train)))
print("–ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º –Ω–∞–±–æ—Ä–µ: {:.2f}".format(ridge.score(X_test, y_test)))


# –≠—Ç–æ —Å–æ–≥–ª–∞—Å—É–µ—Ç—Å—è —Å –Ω–∞—à–∏–º–∏ –æ–∂–∏–¥–∞–Ω–∏—è–º–∏. –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ª–∏–Ω–µ–π–Ω–æ–π
# —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –º—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ. Ridge ‚Äì –º–æ–¥–µ–ª—å —Å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º, –ø–æ—ç—Ç–æ–º—É
# –º–µ–Ω—å—à–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è. –ú–µ–Ω–µ–µ —Å–ª–æ–∂–Ω–∞—è –º–æ–¥–µ–ª—å –æ–∑–Ω–∞—á–∞–µ—Ç –º–µ–Ω—å—à—É—é –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞
# –æ–±—É—á–∞—é—â–µ–º –Ω–∞–±–æ—Ä–µ, –Ω–æ –ª—É—á—à—É—é –æ–±–æ–±—â–∞—é—â—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å. –ü–æ—Å–∫–æ–ª—å–∫—É –Ω–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Ç–æ–ª—å–∫–æ
# –æ–±–æ–±—â–∞—é—â–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å, –º—ã –¥–æ–ª–∂–Ω—ã –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å Ridge –≤–º–µ—Å—Ç–æ –º–æ–¥–µ–ª–∏ LinearRegression.

print("================== 10 ====================");

# –ú–æ–¥–µ–ª—å Ridge –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–π—Ç–∏ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å –º–µ–∂–¥—É –ø—Ä–æ—Å—Ç–æ—Ç–æ–π –º–æ–¥–µ–ª–∏ (–ø–æ–ª—É—á–µ–Ω–∏–µ–º
# –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤, –±–ª–∏–∑–∫–∏—Ö –∫ –Ω—É–ª—é) –∏ –∫–∞—á–µ—Å—Ç–≤–æ–º –µ–µ —Ä–∞–±–æ—Ç—ã –Ω–∞ –æ–±—É—á–∞—é—â–µ–º –Ω–∞–±–æ—Ä–µ. –ö–æ–º–ø—Ä–æ–º–∏—Å—Å
# –º–µ–∂–¥—É –ø—Ä–æ—Å—Ç–æ—Ç–æ–π –º–æ–¥–µ–ª–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–æ–º —Ä–∞–±–æ—Ç—ã –Ω–∞ –æ–±—É—á–∞—é—â–µ–º –Ω–∞–±–æ—Ä–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–¥–∞–Ω
# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø—Ä–∏ –ø–æ–º–æ—â–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ alpha.

ridge10 = Ridge(alpha=10).fit(X_train, y_train)
print("–ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –æ–±—É—á–∞—é—â–µ–º –Ω–∞–±–æ—Ä–µ: {:.2f}".format(ridge10.score(X_train, y_train)))
print("–ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º –Ω–∞–±–æ—Ä–µ: {:.2f}".format(ridge10.score(X_test, y_test)))
print("=================== 0.1 ===================");
ridge01 = Ridge(alpha=0.1).fit(X_train, y_train)
print("–ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –æ–±—É—á–∞—é—â–µ–º –Ω–∞–±–æ—Ä–µ: {:.2f}".format(ridge01.score(X_train, y_train)))
print("–ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º –Ω–∞–±–æ—Ä–µ: {:.2f}".format(ridge01.score(X_test, y_test)))
print("======================================");
plt.plot(ridge.coef_, 's', label="–ì—Ä–µ–±–Ω–µ–≤–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è alpha=1")
plt.plot(ridge10.coef_, '^', label="–ì—Ä–µ–±–Ω–µ–≤–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è alpha=10")
plt.plot(ridge01.coef_, 'v', label="–ì—Ä–µ–±–Ω–µ–≤–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è alpha=0.1")
plt.plot(lr.coef_, 'o', label="–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è")
plt.xlabel("–ò–Ω–¥–µ–∫—Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞")
plt.ylabel("–û—Ü–µ–Ω–∫–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞")
plt.hlines(0, 0, len(lr.coef_))
plt.ylim(-25, 25)
plt.legend()
plt.show()

# –ø—Ä–∏–≤–æ–¥—è—Ç—Å—è –≥—Ä–∞—Ñ–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã –º–æ–¥–µ–ª–∏ –≤ –≤–∏–¥–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç –æ–±—ä–µ–º–∞
# –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –∏—Ö –µ—â–µ –Ω–∞–∑—ã–≤–∞—é—Ç –∫—Ä–∏–≤—ã–º–∏ –æ–±—É—á–µ–Ω–∏—è (learning curves):

mglearn.plots.plot_ridge_n_samples()
plt.show()

# –ö–∞–∫ –∏ —Å–ª–µ–¥–æ–≤–∞–ª–æ –æ–∂–∏–¥–∞—Ç—å, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –æ–±—É—á–∞—é—â–µ–º
# –Ω–∞–±–æ—Ä–µ –≤—Å–µ–≥–¥–∞ –≤—ã—à–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º –Ω–∞–±–æ—Ä–µ, –∫–∞–∫ —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥—Ä–µ–±–Ω–µ–≤–æ–π
# —Ä–µ–≥—Ä–µ—Å—Å–∏–∏, —Ç–∞–∫ –∏ –≤ —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏.

print("================= –õ–∞—Å—Å–æ =====================");

#  –ª–∞—Å—Å–æ —Ç–∞–∫–∂–µ —Å–∂–∏–º–∞–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–æ –±–ª–∏–∑–∫–∏—Ö –∫ –Ω—É–ª—é –∑–Ω–∞—á–µ–Ω–∏–π, –Ω–æ
# –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º, –Ω–∞–∑—ã–≤–∞–µ–º—ã–º L1 —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–µ–π. –†–µ–∑—É–ª—å—Ç–∞—Ç L1 —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏
# –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ª–∞—Å—Å–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —Ä–∞–≤–Ω—ã
# —Ç–æ—á–Ω–æ –Ω—É–ª—é. –ü–æ–ª—É—á–∞–µ—Ç—Å—è, —á—Ç–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–∫–ª—é—á–∞—é—Ç—Å—è –∏–∑ –º–æ–¥–µ–ª–∏. –≠—Ç–æ –º–æ–∂–Ω–æ
# —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–∞–∫ –æ–¥–∏–Ω –∏–∑ –≤–∏–¥–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–±–æ—Ä–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤. –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω—É–ª–µ–≤—ã—Ö
# –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —á–∞—Å—Ç–æ —É–ø—Ä–æ—â–∞–µ—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –º–æ–¥–µ–ª–∏ –∏ –º–æ–∂–µ—Ç –≤—ã—è–≤–∏—Ç—å
# –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏.


from sklearn.linear_model import Lasso
lasso = Lasso().fit(X_train, y_train)
print("–ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –æ–±—É—á–∞—é—â–µ–º –Ω–∞–±–æ—Ä–µ: {:.2f}".format(lasso.score(X_train, y_train)))
print("–ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–º –Ω–∞–±–æ—Ä–µ: {:.2f}".format(lasso.score(X_test, y_test)))
print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {}".format(np.sum(lasso.coef_ != 0)))
print("======================================");
# –º—ã —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ "max_iter",
# –∏–Ω–∞—á–µ –º–æ–¥–µ–ª—å –≤—ã–¥–∞—Å—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, —á—Ç–æ –Ω—É–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å max_iter.
lasso001 = Lasso(alpha=0.01, max_iter=100000).fit(X_train, y_train)
print("–ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –æ–±—É—á–∞—é—â–µ–º –Ω–∞–±–æ—Ä–µ: {:.2f}".format(lasso001.score(X_train, y_train)))
print("–ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º –Ω–∞–±–æ—Ä–µ: {:.2f}".format(lasso001.score(X_test, y_test)))
print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {}".format(np.sum(lasso001.coef_ != 0)))
print("======================================");
lasso00001 = Lasso(alpha=0.0001, max_iter=100000).fit(X_train, y_train)
print("–ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –æ–±—É—á–∞—é—â–µ–º –Ω–∞–±–æ—Ä–µ: {:.2f}".format(lasso00001.score(X_train, y_train)))
print("–ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º –Ω–∞–±–æ—Ä–µ: {:.2f}".format(lasso00001.score(X_test, y_test)))
print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {}".format(np.sum(lasso00001.coef_ != 0)))
print("======================================");
plt.plot(lasso.coef_, 's', label="–õ–∞—Å—Å–æ alpha=1")
plt.plot(lasso001.coef_, '^', label="–õ–∞—Å—Å–æ alpha=0.01")
plt.plot(lasso00001.coef_, 'v', label="–õ–∞—Å—Å–æ alpha=0.0001")
plt.plot(ridge01.coef_, 'o', label="–ì—Ä–µ–±–Ω–µ–≤–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è alpha=0.1")
plt.legend(ncol=2, loc=(0, 1.05))
plt.ylim(-25, 25)
plt.xlabel("–ò–Ω–¥–µ–∫—Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞")
plt.ylabel("–û—Ü–µ–Ω–∫–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞")
plt.show()